var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
var NodeBase = require("awayjs-display/lib/partition/NodeBase");
var Partition2DNode = (function (_super) {
    __extends(Partition2DNode, _super);
    function Partition2DNode(root) {
        _super.call(this);
        this._root = root;
    }
    Partition2DNode.prototype.acceptTraverser = function (traverser) {
        if (traverser.enterNode(this)) {
            this.traverseSceneGraph(this._root, traverser);
        }
    };
    // pass any so we can convert to IEntity. Sigh, TypeScript.
    Partition2DNode.prototype.traverseSceneGraph = function (displayObject, traverser) {
        // typechecking is nasty, but we have little choice:
        if (displayObject instanceof DisplayObjectContainer)
            this.traverseChildren(displayObject, traverser);
        // (typechecking an interface doesn't work, ie "displayObject instanceof IEntity" is impossible)
        if (displayObject._iCollectRenderables) {
            var entity = (displayObject);
            entity["node2D"].acceptTraverser(traverser);
        }
    };
    Partition2DNode.prototype.traverseChildren = function (container, traverser) {
        var len = container.numChildren;
        for (var i = 0; i < len; ++i)
            this.traverseSceneGraph(container.getChildAt(i), traverser);
    };
    Partition2DNode.prototype.iAddNode = function (node) {
        _super.prototype.iAddNode.call(this, node);
        // HORRIBLE:
        var entityNode = (node);
        entityNode.entity["node2D"] = node;
    };
    return Partition2DNode;
})(NodeBase);
module.exports = Partition2DNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1wbGF5ZXIvbGliL3BhcnRpdGlvbi9QYXJ0aXRpb24yRE5vZGUudHMiXSwibmFtZXMiOlsiUGFydGl0aW9uMkROb2RlIiwiUGFydGl0aW9uMkROb2RlLmNvbnN0cnVjdG9yIiwiUGFydGl0aW9uMkROb2RlLmFjY2VwdFRyYXZlcnNlciIsIlBhcnRpdGlvbjJETm9kZS50cmF2ZXJzZVNjZW5lR3JhcGgiLCJQYXJ0aXRpb24yRE5vZGUudHJhdmVyc2VDaGlsZHJlbiIsIlBhcnRpdGlvbjJETm9kZS5pQWRkTm9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBR0EsSUFBTyxzQkFBc0IsV0FBVyxzREFBc0QsQ0FBQyxDQUFDO0FBQ2hHLElBQU8sUUFBUSxXQUFXLHVDQUF1QyxDQUFDLENBQUM7QUFHbkUsSUFBTSxlQUFlO0lBQVNBLFVBQXhCQSxlQUFlQSxVQUFpQkE7SUFJbENBLFNBSkVBLGVBQWVBLENBSUxBLElBQWtCQTtRQUUxQkMsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3RCQSxDQUFDQTtJQUVNRCx5Q0FBZUEsR0FBdEJBLFVBQXVCQSxTQUF1QkE7UUFFMUNFLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzVCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLFNBQVNBLENBQUNBLENBQUNBO1FBQ25EQSxDQUFDQTtJQUNMQSxDQUFDQTtJQUVERiwyREFBMkRBO0lBQ3BEQSw0Q0FBa0JBLEdBQXpCQSxVQUEwQkEsYUFBaUJBLEVBQUVBLFNBQXVCQTtRQUVoRUcsQUFDQUEsb0RBRG9EQTtRQUNwREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsYUFBYUEsWUFBWUEsc0JBQXNCQSxDQUFDQTtZQUNoREEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUF5QkEsYUFBYUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFFNUVBLEFBQ0FBLGdHQURnR0E7UUFDaEdBLEVBQUVBLENBQUNBLENBQUNBLGFBQWFBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckNBLElBQUlBLE1BQU1BLEdBQVlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1lBQ3RDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxlQUFlQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUNoREEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFT0gsMENBQWdCQSxHQUF4QkEsVUFBeUJBLFNBQWdDQSxFQUFFQSxTQUF1QkE7UUFFOUVJLElBQUlBLEdBQUdBLEdBQUdBLFNBQVNBLENBQUNBLFdBQVdBLENBQUNBO1FBRWhDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUN4QkEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUNwRUEsQ0FBQ0E7SUFFTUosa0NBQVFBLEdBQWZBLFVBQWdCQSxJQUFhQTtRQUV6QkssZ0JBQUtBLENBQUNBLFFBQVFBLFlBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ3JCQSxBQUNBQSxZQURZQTtZQUNSQSxVQUFVQSxHQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNwQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdkNBLENBQUNBO0lBQ0xMLHNCQUFDQTtBQUFEQSxDQTlDQSxBQThDQ0EsRUE5QzZCLFFBQVEsRUE4Q3JDO0FBQ0QsQUFBeUIsaUJBQWhCLGVBQWUsQ0FBQyIsImZpbGUiOiJwYXJ0aXRpb24vUGFydGl0aW9uMkROb2RlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb2xsZWN0b3JCYXNlID0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi90cmF2ZXJzZS9Db2xsZWN0b3JCYXNlXCIpO1xuaW1wb3J0IERpc3BsYXlPYmplY3QgPSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvRGlzcGxheU9iamVjdFwiKTtcbmltcG9ydCBJRW50aXR5ID0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9JRW50aXR5XCIpO1xuaW1wb3J0IERpc3BsYXlPYmplY3RDb250YWluZXIgPSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2NvbnRhaW5lcnMvRGlzcGxheU9iamVjdENvbnRhaW5lclwiKTtcbmltcG9ydCBOb2RlQmFzZSA9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL05vZGVCYXNlXCIpO1xuaW1wb3J0IEVudGl0eU5vZGUgPSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3BhcnRpdGlvbi9FbnRpdHlOb2RlXCIpO1xuXG5jbGFzcyBQYXJ0aXRpb24yRE5vZGUgZXh0ZW5kcyBOb2RlQmFzZVxue1xuICAgIHByaXZhdGUgX3Jvb3QgOiBEaXNwbGF5T2JqZWN0O1xuXG4gICAgY29uc3RydWN0b3Iocm9vdDpEaXNwbGF5T2JqZWN0KVxuICAgIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gICAgfVxuXG4gICAgcHVibGljIGFjY2VwdFRyYXZlcnNlcih0cmF2ZXJzZXI6Q29sbGVjdG9yQmFzZSlcbiAgICB7XG4gICAgICAgIGlmICh0cmF2ZXJzZXIuZW50ZXJOb2RlKHRoaXMpKSB7XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlU2NlbmVHcmFwaCh0aGlzLl9yb290LCB0cmF2ZXJzZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFzcyBhbnkgc28gd2UgY2FuIGNvbnZlcnQgdG8gSUVudGl0eS4gU2lnaCwgVHlwZVNjcmlwdC5cbiAgICBwdWJsaWMgdHJhdmVyc2VTY2VuZUdyYXBoKGRpc3BsYXlPYmplY3Q6YW55LCB0cmF2ZXJzZXI6Q29sbGVjdG9yQmFzZSlcbiAgICB7XG4gICAgICAgIC8vIHR5cGVjaGVja2luZyBpcyBuYXN0eSwgYnV0IHdlIGhhdmUgbGl0dGxlIGNob2ljZTpcbiAgICAgICAgaWYgKGRpc3BsYXlPYmplY3QgaW5zdGFuY2VvZiBEaXNwbGF5T2JqZWN0Q29udGFpbmVyKVxuICAgICAgICAgICAgdGhpcy50cmF2ZXJzZUNoaWxkcmVuKDxEaXNwbGF5T2JqZWN0Q29udGFpbmVyPmRpc3BsYXlPYmplY3QsIHRyYXZlcnNlcik7XG5cbiAgICAgICAgLy8gKHR5cGVjaGVja2luZyBhbiBpbnRlcmZhY2UgZG9lc24ndCB3b3JrLCBpZSBcImRpc3BsYXlPYmplY3QgaW5zdGFuY2VvZiBJRW50aXR5XCIgaXMgaW1wb3NzaWJsZSlcbiAgICAgICAgaWYgKGRpc3BsYXlPYmplY3QuX2lDb2xsZWN0UmVuZGVyYWJsZXMpIHtcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSA8SUVudGl0eT4oZGlzcGxheU9iamVjdCk7XG4gICAgICAgICAgICBlbnRpdHlbXCJub2RlMkRcIl0uYWNjZXB0VHJhdmVyc2VyKHRyYXZlcnNlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRyYXZlcnNlQ2hpbGRyZW4oY29udGFpbmVyOkRpc3BsYXlPYmplY3RDb250YWluZXIsIHRyYXZlcnNlcjpDb2xsZWN0b3JCYXNlKVxuICAgIHtcbiAgICAgICAgdmFyIGxlbiA9IGNvbnRhaW5lci5udW1DaGlsZHJlbjtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgICAgICAgdGhpcy50cmF2ZXJzZVNjZW5lR3JhcGgoY29udGFpbmVyLmdldENoaWxkQXQoaSksIHRyYXZlcnNlcik7XG4gICAgfVxuXG4gICAgcHVibGljIGlBZGROb2RlKG5vZGU6Tm9kZUJhc2UpXG4gICAge1xuICAgICAgICBzdXBlci5pQWRkTm9kZShub2RlKTtcbiAgICAgICAgLy8gSE9SUklCTEU6XG4gICAgICAgIHZhciBlbnRpdHlOb2RlID0gPEVudGl0eU5vZGU+KG5vZGUpO1xuICAgICAgICBlbnRpdHlOb2RlLmVudGl0eVtcIm5vZGUyRFwiXSA9IG5vZGU7XG4gICAgfVxufVxuZXhwb3J0ID0gUGFydGl0aW9uMkROb2RlOyJdfQ==