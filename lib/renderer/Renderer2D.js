var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var RenderableNullSort = require("awayjs-display/lib/sort/RenderableNullSort");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var Mask = require("awayjs-player/lib/renderer/Mask");
var Renderer2D = (function (_super) {
    __extends(Renderer2D, _super);
    function Renderer2D(rendererPoolClass, stage) {
        if (rendererPoolClass === void 0) { rendererPoolClass = null; }
        if (stage === void 0) { stage = null; }
        _super.call(this, rendererPoolClass, stage);
        this.renderableSorter = new RenderableNullSort();
        this._mask = new Mask(this._pStage, this);
    }
    Renderer2D.prototype.drawRenderables = function (renderable, entityCollector) {
        var i;
        var len;
        var renderable2;
        var renderObject;
        var passes;
        var pass;
        var camera = entityCollector.camera;
        var maskConfigID = undefined;
        /*// TypeScript does not allow calling super.setters -_-
        // TODO: There's no reason to stick to POT-textures, but AwayJS complains if we don't
        //this._mask.width = this._pRttBufferManager.textureWidth;
        //this._mask.height = this._pRttBufferManager.textureHeight;*/
        this._mask.reset();
        while (renderable) {
            renderObject = renderable.renderObject;
            passes = renderObject.passes;
            if (renderable.sourceEntity._iMaskID) {
                renderable2 = renderable.next;
                this._mask.registerMask(renderable);
            }
            else if (this._disableColor && renderObject._renderObjectOwner.alphaThreshold != 0) {
                renderable2 = renderable;
                do {
                    renderable2 = renderable2.next;
                } while (renderable2 && renderable2.renderObject == renderObject);
            }
            else {
                //iterate through each shader object
                len = passes.length;
                for (i = 0; i < len; i++) {
                    renderable2 = renderable;
                    var newMaskConfigID = renderable2.sourceEntity["maskConfigID"];
                    if (maskConfigID !== newMaskConfigID) {
                        if (newMaskConfigID == -1) {
                            // disable stencil
                            this._pContext.setStencilActions();
                            console.log("Let's not use stencil!");
                        }
                        else {
                            console.log("Rendering masks with configID " + newMaskConfigID);
                            this._pContext.setStencilReferenceValue(newMaskConfigID);
                            this._mask.renderMasks(renderable2.sourceEntity["hierarchicalMasks"], newMaskConfigID);
                            this._pContext.setStencilActions("frontAndBack", "equal", "keep", "keep", "keep");
                        }
                        maskConfigID = newMaskConfigID;
                    }
                    pass = passes[i];
                    this.activatePass(renderable, pass, camera);
                    do {
                        renderable2._iRender(pass, camera, this._pRttViewProjectionMatrix);
                        renderable2 = renderable2.next;
                    } while (renderable2 && renderable2.renderObject == renderObject && renderable2.sourceEntity["maskConfigID"] == maskConfigID);
                    this.deactivatePass(renderable, pass);
                }
            }
            renderable = renderable2;
        }
    };
    return Renderer2D;
})(DefaultRenderer);
module.exports = Renderer2D;

//# sourceMappingURL=data:application/json;base64,