/**
 * @class away.sort.RenderableMergeSort
 */
var RenderableMergeSort = (function () {
    function RenderableMergeSort() {
    }
    RenderableMergeSort.prototype.sortBlendedRenderables = function (head) {
        var headB;
        var fast;
        var slow;
        if (!head || !head.next) {
            return head;
        }
        // split in two sublists
        slow = head;
        fast = head.next;
        while (fast) {
            fast = fast.next;
            if (fast) {
                slow = slow.next;
                fast = fast.next;
            }
        }
        headB = slow.next;
        slow.next = null;
        // recurse
        head = this.sortBlendedRenderables(head);
        headB = this.sortBlendedRenderables(headB);
        // merge sublists while respecting order
        var result;
        var curr;
        var l;
        if (!head)
            return headB;
        if (!headB)
            return head;
        while (head && headB) {
            if (head.zIndex < headB.zIndex) {
                l = head;
                head = head.next;
            }
            else {
                l = headB;
                headB = headB.next;
            }
            if (!result)
                result = l;
            else
                curr.next = l;
            curr = l;
        }
        if (head)
            curr.next = head;
        else if (headB)
            curr.next = headB;
        return result;
    };
    RenderableMergeSort.prototype.sortOpaqueRenderables = function (head) {
        return this.sortBlendedRenderables(head);
    };
    return RenderableMergeSort;
})();
module.exports = RenderableMergeSort;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1wbGF5ZXIvbGliL3JlbmRlcmVyL1JlbmRlcmFibGVTb3J0MkQudHMiXSwibmFtZXMiOlsiUmVuZGVyYWJsZU1lcmdlU29ydCIsIlJlbmRlcmFibGVNZXJnZVNvcnQuY29uc3RydWN0b3IiLCJSZW5kZXJhYmxlTWVyZ2VTb3J0LnNvcnRCbGVuZGVkUmVuZGVyYWJsZXMiLCJSZW5kZXJhYmxlTWVyZ2VTb3J0LnNvcnRPcGFxdWVSZW5kZXJhYmxlcyJdLCJtYXBwaW5ncyI6IkFBR0EsQUFHQTs7R0FERztJQUNHLG1CQUFtQjtJQUF6QkEsU0FBTUEsbUJBQW1CQTtJQW9FekJDLENBQUNBO0lBbEVVRCxvREFBc0JBLEdBQTdCQSxVQUE4QkEsSUFBZ0JBO1FBRTFDRSxJQUFJQSxLQUFpQkEsQ0FBQ0E7UUFDdEJBLElBQUlBLElBQWdCQSxDQUFDQTtRQUNyQkEsSUFBSUEsSUFBZ0JBLENBQUNBO1FBRXJCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBRURBLEFBQ0FBLHdCQUR3QkE7UUFDeEJBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBQ1pBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO1FBRWpCQSxPQUFPQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNWQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUNqQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1BBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO2dCQUNqQkEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDckJBLENBQUNBO1FBQ0xBLENBQUNBO1FBRURBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO1FBQ2xCQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUVqQkEsQUFDQUEsVUFEVUE7UUFDVkEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUN6Q0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUUzQ0EsQUFDQUEsd0NBRHdDQTtZQUNwQ0EsTUFBa0JBLENBQUNBO1FBQ3ZCQSxJQUFJQSxJQUFnQkEsQ0FBQ0E7UUFDckJBLElBQUlBLENBQWFBLENBQUNBO1FBRWxCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUNOQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUNqQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDUEEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFaEJBLE9BQU9BLElBQUlBLElBQUlBLEtBQUtBLEVBQUVBLENBQUNBO1lBQ25CQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDN0JBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO2dCQUNUQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUNyQkEsQ0FBQ0E7WUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ0pBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO2dCQUNWQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUN2QkEsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBQ1JBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1lBQUNBLElBQUlBO2dCQUNoQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFbEJBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2JBLENBQUNBO1FBRURBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO1lBQ0xBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBO1lBQ2pDQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUV0QkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDbEJBLENBQUNBO0lBRU1GLG1EQUFxQkEsR0FBNUJBLFVBQTZCQSxJQUFnQkE7UUFFekNHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDN0NBLENBQUNBO0lBQ0xILDBCQUFDQTtBQUFEQSxDQXBFQSxBQW9FQ0EsSUFBQTtBQUVELEFBQTZCLGlCQUFwQixtQkFBbUIsQ0FBQyIsImZpbGUiOiJyZW5kZXJlci9SZW5kZXJhYmxlU29ydDJELmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJUmVuZGVyYWJsZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcG9vbC9JUmVuZGVyYWJsZVwiKTtcclxuaW1wb3J0IElFbnRpdHlTb3J0ZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9zb3J0L0lFbnRpdHlTb3J0ZXJcIik7XHJcblxyXG4vKipcclxuICogQGNsYXNzIGF3YXkuc29ydC5SZW5kZXJhYmxlTWVyZ2VTb3J0XHJcbiAqL1xyXG5jbGFzcyBSZW5kZXJhYmxlTWVyZ2VTb3J0IGltcGxlbWVudHMgSUVudGl0eVNvcnRlclxyXG57XHJcbiAgICBwdWJsaWMgc29ydEJsZW5kZWRSZW5kZXJhYmxlcyhoZWFkOklSZW5kZXJhYmxlKTpJUmVuZGVyYWJsZVxyXG4gICAge1xyXG4gICAgICAgIHZhciBoZWFkQjpJUmVuZGVyYWJsZTtcclxuICAgICAgICB2YXIgZmFzdDpJUmVuZGVyYWJsZTtcclxuICAgICAgICB2YXIgc2xvdzpJUmVuZGVyYWJsZTtcclxuXHJcbiAgICAgICAgaWYgKCFoZWFkIHx8ICFoZWFkLm5leHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhlYWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzcGxpdCBpbiB0d28gc3VibGlzdHNcclxuICAgICAgICBzbG93ID0gaGVhZDtcclxuICAgICAgICBmYXN0ID0gaGVhZC5uZXh0O1xyXG5cclxuICAgICAgICB3aGlsZSAoZmFzdCkge1xyXG4gICAgICAgICAgICBmYXN0ID0gZmFzdC5uZXh0O1xyXG4gICAgICAgICAgICBpZiAoZmFzdCkge1xyXG4gICAgICAgICAgICAgICAgc2xvdyA9IHNsb3cubmV4dDtcclxuICAgICAgICAgICAgICAgIGZhc3QgPSBmYXN0Lm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhlYWRCID0gc2xvdy5uZXh0O1xyXG4gICAgICAgIHNsb3cubmV4dCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIHJlY3Vyc2VcclxuICAgICAgICBoZWFkID0gdGhpcy5zb3J0QmxlbmRlZFJlbmRlcmFibGVzKGhlYWQpO1xyXG4gICAgICAgIGhlYWRCID0gdGhpcy5zb3J0QmxlbmRlZFJlbmRlcmFibGVzKGhlYWRCKTtcclxuXHJcbiAgICAgICAgLy8gbWVyZ2Ugc3VibGlzdHMgd2hpbGUgcmVzcGVjdGluZyBvcmRlclxyXG4gICAgICAgIHZhciByZXN1bHQ6SVJlbmRlcmFibGU7XHJcbiAgICAgICAgdmFyIGN1cnI6SVJlbmRlcmFibGU7XHJcbiAgICAgICAgdmFyIGw6SVJlbmRlcmFibGU7XHJcblxyXG4gICAgICAgIGlmICghaGVhZClcclxuICAgICAgICAgICAgcmV0dXJuIGhlYWRCO1xyXG4gICAgICAgIGlmICghaGVhZEIpXHJcbiAgICAgICAgICAgIHJldHVybiBoZWFkO1xyXG5cclxuICAgICAgICB3aGlsZSAoaGVhZCAmJiBoZWFkQikge1xyXG4gICAgICAgICAgICBpZiAoaGVhZC56SW5kZXggPCBoZWFkQi56SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGwgPSBoZWFkO1xyXG4gICAgICAgICAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGwgPSBoZWFkQjtcclxuICAgICAgICAgICAgICAgIGhlYWRCID0gaGVhZEIubmV4dDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFyZXN1bHQpXHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBsOyBlbHNlXHJcbiAgICAgICAgICAgICAgICBjdXJyLm5leHQgPSBsO1xyXG5cclxuICAgICAgICAgICAgY3VyciA9IGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaGVhZClcclxuICAgICAgICAgICAgY3Vyci5uZXh0ID0gaGVhZDsgZWxzZSBpZiAoaGVhZEIpXHJcbiAgICAgICAgICAgIGN1cnIubmV4dCA9IGhlYWRCO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzb3J0T3BhcXVlUmVuZGVyYWJsZXMoaGVhZDpJUmVuZGVyYWJsZSk6SVJlbmRlcmFibGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb3J0QmxlbmRlZFJlbmRlcmFibGVzKGhlYWQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBSZW5kZXJhYmxlTWVyZ2VTb3J0OyJdfQ==