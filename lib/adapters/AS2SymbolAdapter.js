var AS2SymbolAdapter = (function () {
    function AS2SymbolAdapter(adaptee) {
        this._adaptee = adaptee;
    }
    Object.defineProperty(AS2SymbolAdapter.prototype, "adaptee", {
        get: function () {
            return this._adaptee;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AS2SymbolAdapter.prototype, "_rotation", {
        get: function () {
            return this._adaptee.rotationZ;
        },
        set: function (value) {
            this._adaptee.rotationZ = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AS2SymbolAdapter.prototype, "_x", {
        get: function () {
            return this._adaptee.x;
        },
        set: function (value) {
            this._adaptee.x = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AS2SymbolAdapter.prototype, "_y", {
        get: function () {
            return this._adaptee.y;
        },
        set: function (value) {
            this._adaptee.y = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AS2SymbolAdapter.prototype, "_xscale", {
        get: function () {
            return this._adaptee.scaleX;
        },
        set: function (value) {
            this._adaptee.scaleX = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AS2SymbolAdapter.prototype, "_yscale", {
        get: function () {
            return this._adaptee.scaleY;
        },
        set: function (value) {
            this._adaptee.scaleY = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AS2SymbolAdapter.prototype, "_parent", {
        get: function () {
            var parentMC = this._adaptee.parent;
            return parentMC.adapter;
        },
        enumerable: true,
        configurable: true
    });
    AS2SymbolAdapter.prototype.getDepth = function () {
        return this._adaptee.z;
    };
    return AS2SymbolAdapter;
})();
module.exports = AS2SymbolAdapter;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1wbGF5ZXIvbGliL2FkYXB0ZXJzL0FTMlN5bWJvbEFkYXB0ZXIudHMiXSwibmFtZXMiOlsiQVMyU3ltYm9sQWRhcHRlciIsIkFTMlN5bWJvbEFkYXB0ZXIuY29uc3RydWN0b3IiLCJBUzJTeW1ib2xBZGFwdGVyLmFkYXB0ZWUiLCJBUzJTeW1ib2xBZGFwdGVyLl9yb3RhdGlvbiIsIkFTMlN5bWJvbEFkYXB0ZXIuX3giLCJBUzJTeW1ib2xBZGFwdGVyLl95IiwiQVMyU3ltYm9sQWRhcHRlci5feHNjYWxlIiwiQVMyU3ltYm9sQWRhcHRlci5feXNjYWxlIiwiQVMyU3ltYm9sQWRhcHRlci5fcGFyZW50IiwiQVMyU3ltYm9sQWRhcHRlci5nZXREZXB0aCJdLCJtYXBwaW5ncyI6IkFBT0EsSUFBTSxnQkFBZ0I7SUE4Q2xCQSxTQTlDRUEsZ0JBQWdCQSxDQThDTkEsT0FBZ0NBO1FBRXhDQyxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFFREQsc0JBQUlBLHFDQUFPQTthQUFYQTtZQUVJRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtRQUN6QkEsQ0FBQ0E7OztPQUFBRjtJQUVEQSxzQkFBSUEsdUNBQVNBO2FBQWJBO1lBRUlHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBO1FBQ25DQSxDQUFDQTthQUVESCxVQUFjQSxLQUFjQTtZQUV4QkcsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDcENBLENBQUNBOzs7T0FMQUg7SUFPREEsc0JBQUlBLGdDQUFFQTthQUFOQTtZQUVJSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7YUFFREosVUFBT0EsS0FBY0E7WUFFakJJLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzVCQSxDQUFDQTs7O09BTEFKO0lBT0RBLHNCQUFJQSxnQ0FBRUE7YUFBTkE7WUFFSUssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLENBQUNBO2FBRURMLFVBQU9BLEtBQWNBO1lBRWpCSyxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7OztPQUxBTDtJQU9EQSxzQkFBSUEscUNBQU9BO2FBQVhBO1lBRUlNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBO1FBQ2hDQSxDQUFDQTthQUVETixVQUFZQSxLQUFjQTtZQUV0Qk0sSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDakNBLENBQUNBOzs7T0FMQU47SUFPREEsc0JBQUlBLHFDQUFPQTthQUtYQTtZQUVJTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNoQ0EsQ0FBQ0E7YUFSRFAsVUFBWUEsS0FBY0E7WUFFdEJPLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEdBQUdBLEtBQUtBLENBQUNBO1FBQ2pDQSxDQUFDQTs7O09BQUFQO0lBT0RBLHNCQUFJQSxxQ0FBT0E7YUFBWEE7WUFFSVEsSUFBSUEsUUFBUUEsR0FBY0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDL0NBLE1BQU1BLENBQXNCQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNqREEsQ0FBQ0E7OztPQUFBUjtJQUVEQSxtQ0FBUUEsR0FBUkE7UUFFSVMsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDM0JBLENBQUNBO0lBQ0xULHVCQUFDQTtBQUFEQSxDQXBIQSxBQW9IQ0EsSUFBQTtBQUVELEFBQTBCLGlCQUFqQixnQkFBZ0IsQ0FBQyIsImZpbGUiOiJhZGFwdGVycy9BUzJTeW1ib2xBZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudERpc3BhdGNoZXIgPSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9FdmVudERpc3BhdGNoZXJcIik7XHJcbmltcG9ydCBNYXRyaXggPSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4XCIpO1xyXG5pbXBvcnQgRGlzcGxheU9iamVjdENvbnRhaW5lciA9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvY29udGFpbmVycy9EaXNwbGF5T2JqZWN0Q29udGFpbmVyXCIpO1xyXG5cclxuaW1wb3J0IEFTMk1vdmllQ2xpcEFkYXB0ZXIgPSByZXF1aXJlKFwiYXdheWpzLXBsYXllci9saWIvYWRhcHRlcnMvQVMyTW92aWVDbGlwQWRhcHRlclwiKTtcclxuaW1wb3J0IE1vdmllQ2xpcCA9IHJlcXVpcmUoXCJhd2F5anMtcGxheWVyL2xpYi9kaXNwbGF5L01vdmllQ2xpcFwiKTtcclxuXHJcbmNsYXNzIEFTMlN5bWJvbEFkYXB0ZXJcclxue1xyXG4gICAgLy8gX2FscGhhXHJcbiAgICAvLyBibGVuZE1vZGVcclxuICAgIC8vIGNhY2hlQXNCaXRtYXBcclxuICAgIC8vIGZpbHRlcnNcclxuICAgIC8vIF9mb2N1c3JlY3Q6IEJvb2xlYW5cclxuICAgIC8vIF9oaWdocXVhbGl0eTogTnVtYmVyIC8vIERFUFJFQ0FURUQgQU5ZV0FZXHJcbiAgICAvLyBtZW51OiBDb250ZXh0TWVudVxyXG4gICAgLy8gX3F1YWxpdHk6IFN0cmluZ1xyXG4gICAgLy8gc2NhbGU5R3JpZDogUmVjdGFuZ2xlXHJcbiAgICAvLyBfc291bmRidWZ0aW1lOiBOdW1iZXJcclxuICAgIC8vIHRhYkVuYWJsZWQ6IEJvb2xlYW5cclxuICAgIC8vIHRhYkluZGV4OiBOdW1iZXJcclxuICAgIC8vIF90YXJnZXQ6IFN0cmluZyAgW3JlYWQtb25seV1cclxuICAgIC8vIHRyYWNrQXNNZW51OiBCb29sZWFuXHJcbiAgICAvLyBfdXJsOiBTdHJpbmcgW3JlYWQtb25seV1cclxuICAgIC8vIHVzZUhhbmRDdXJzb3I6IEJvb2xlYW5cclxuICAgIC8vIF92aXNpYmxlOiBCb29sZWFuXHJcblxyXG4gICAgLy8gX2hlaWdodDogTnVtYmVyXHJcbiAgICAvLyBfd2lkdGg6IE51bWJlclxyXG5cclxuICAgIC8vIF94bW91c2U6IE51bWJlciBbcmVhZC1vbmx5XVxyXG4gICAgLy8gX3ltb3VzZTogTnVtYmVyIFtyZWFkLW9ubHldXHJcblxyXG4gICAgLy8gX25hbWU6IFN0cmluZ1xyXG4gICAgLy8gX3BhcmVudDogTW92aWVDbGlwXHJcbiAgICAvLyBfeDogbnVtYmVyXHJcbiAgICAvLyBfeTogbnVtYmVyXHJcbiAgICAvLyBpZCAocmVuYW1lZCB0byBpbnN0YW5jZUlEKVxyXG5cclxuICAgIC8qcHVibGljIG9uRHJhZ091dCA6IEZ1bmN0aW9uO1xyXG4gICAgcHVibGljIG9uRHJhZ092ZXIgOiBGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBvbktleURvd24gOiBGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBvbktleVVwIDogRnVuY3Rpb247XHJcbiAgICBwdWJsaWMgb25LaWxsRm9jdXMgOiBGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBvblByZXNzIDogRnVuY3Rpb247XHJcbiAgICBwdWJsaWMgb25SZWxlYXNlIDogRnVuY3Rpb247XHJcbiAgICBwdWJsaWMgb25SZWxlYXNlT3V0c2lkZSA6IEZ1bmN0aW9uO1xyXG4gICAgcHVibGljIG9uUm9sbE91dCA6IEZ1bmN0aW9uO1xyXG4gICAgcHVibGljIG9uUm9sbE92ZXIgOiBGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBvblNldEZvY3VzIDogRnVuY3Rpb247Ki9cclxuXHJcbiAgICBwcml2YXRlIF9hZGFwdGVlIDogRGlzcGxheU9iamVjdENvbnRhaW5lcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhZGFwdGVlIDogRGlzcGxheU9iamVjdENvbnRhaW5lcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLl9hZGFwdGVlID0gYWRhcHRlZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYWRhcHRlZSgpIDogRGlzcGxheU9iamVjdENvbnRhaW5lclxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBfcm90YXRpb24oKSA6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVlLnJvdGF0aW9uWjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgX3JvdGF0aW9uKHZhbHVlIDogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2FkYXB0ZWUucm90YXRpb25aID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF94KCkgOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRhcHRlZS54O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBfeCh2YWx1ZSA6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLl9hZGFwdGVlLnggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgX3koKSA6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVlLnk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IF95KHZhbHVlIDogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2FkYXB0ZWUueSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBfeHNjYWxlKCkgOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRhcHRlZS5zY2FsZVg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IF94c2NhbGUodmFsdWUgOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fYWRhcHRlZS5zY2FsZVggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgX3lzY2FsZSh2YWx1ZSA6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLl9hZGFwdGVlLnNjYWxlWSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBfeXNjYWxlKCkgOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRhcHRlZS5zY2FsZVk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IF9wYXJlbnQoKSA6IEFTMk1vdmllQ2xpcEFkYXB0ZXJcclxuICAgIHtcclxuICAgICAgICB2YXIgcGFyZW50TUMgPSA8TW92aWVDbGlwPnRoaXMuX2FkYXB0ZWUucGFyZW50O1xyXG4gICAgICAgIHJldHVybiA8QVMyTW92aWVDbGlwQWRhcHRlcj5wYXJlbnRNQy5hZGFwdGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERlcHRoKCkgOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRhcHRlZS56O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBBUzJTeW1ib2xBZGFwdGVyOyJdfQ==