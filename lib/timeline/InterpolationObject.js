/**
 * TimeLineObject represents a unique object that is (or will be) used by a TimeLine.
 *  A TimeLineObject basically consists of an objID, and an IAsset.
 *  The FrameCommands hold references to these TimeLineObjects, so they can access and modify the IAssets

 */
var InterpolationObject = (function () {
    function InterpolationObject(type, startValue, endValue, startTime, endTime) {
        this._type = type;
        this._startValue = startValue;
        this._startTime = startTime;
        this._endValue = endValue;
        this._duration = endTime - startTime;
    }
    InterpolationObject.prototype.getState = function (time, speed) {
        // todo: handle reverse playback
        if (time < this._startTime * speed) {
            return;
        }
        if (time > this._endTime * speed) {
            return;
        }
        if (this._type == 0) {
            //interpolate number
            return (this._startValue + (((time - this._startTime) * (this._duration * speed)) * (this._endValue - this._startValue)));
        }
        if (this._type == 1) {
        }
        if (this._type == 2) {
        }
        if (this._type == 3) {
        }
        return;
    };
    return InterpolationObject;
})();
module.exports = InterpolationObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1wbGF5ZXIvbGliL3RpbWVsaW5lL0ludGVycG9sYXRpb25PYmplY3QudHMiXSwibmFtZXMiOlsiSW50ZXJwb2xhdGlvbk9iamVjdCIsIkludGVycG9sYXRpb25PYmplY3QuY29uc3RydWN0b3IiLCJJbnRlcnBvbGF0aW9uT2JqZWN0LmdldFN0YXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxBQU1BOzs7OztHQURHO0lBQ0csbUJBQW1CO0lBU3JCQSxTQVRFQSxtQkFBbUJBLENBU1RBLElBQVdBLEVBQUVBLFVBQVVBLEVBQUVBLFFBQVFBLEVBQUVBLFNBQWdCQSxFQUFDQSxPQUFjQTtRQUUxRUMsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLElBQUlBLENBQUNBLFdBQVdBLEdBQUNBLFVBQVVBLENBQUNBO1FBQzVCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFDQSxTQUFTQSxDQUFDQTtRQUMxQkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLFNBQVNBLEdBQUNBLE9BQU9BLEdBQUNBLFNBQVNBLENBQUNBO0lBQ3JDQSxDQUFDQTtJQUVNRCxzQ0FBUUEsR0FBZkEsVUFBZ0JBLElBQVdBLEVBQUVBLEtBQVlBO1FBQ3JDRSxBQUNBQSxnQ0FEZ0NBO1FBQ2hDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNqQ0EsTUFBTUEsQ0FBQ0E7UUFDWEEsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDL0JBLE1BQU1BLENBQUNBO1FBQ1hBLENBQUNBO1FBQ0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xCQSxBQUNBQSxvQkFEb0JBO1lBQ3BCQSxNQUFNQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM5SEEsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7UUFFckJBLENBQUNBO1FBQ0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRXRCQSxDQUFDQTtRQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV0QkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFDTEYsMEJBQUNBO0FBQURBLENBekNBLEFBeUNDQSxJQUFBO0FBRUQsQUFBNkIsaUJBQXBCLG1CQUFtQixDQUFDIiwiZmlsZSI6InRpbWVsaW5lL0ludGVycG9sYXRpb25PYmplY3QuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaW1lTGluZU9iamVjdCByZXByZXNlbnRzIGEgdW5pcXVlIG9iamVjdCB0aGF0IGlzIChvciB3aWxsIGJlKSB1c2VkIGJ5IGEgVGltZUxpbmUuXG4gKiAgQSBUaW1lTGluZU9iamVjdCBiYXNpY2FsbHkgY29uc2lzdHMgb2YgYW4gb2JqSUQsIGFuZCBhbiBJQXNzZXQuXG4gKiAgVGhlIEZyYW1lQ29tbWFuZHMgaG9sZCByZWZlcmVuY2VzIHRvIHRoZXNlIFRpbWVMaW5lT2JqZWN0cywgc28gdGhleSBjYW4gYWNjZXNzIGFuZCBtb2RpZnkgdGhlIElBc3NldHNcblxuICovXG5jbGFzcyBJbnRlcnBvbGF0aW9uT2JqZWN0XG57XG4gICAgcHJpdmF0ZSBfdHlwZTsvLzA6bnVtYmVyICwgMTogbWF0cml4M0QsIDI6IG1hdHJpeDJELCAzOkNvbG9yVHJhbnNmb3JtLFxuICAgIHByaXZhdGUgX3N0YXJ0VmFsdWU7XG4gICAgcHJpdmF0ZSBfc3RhcnRUaW1lOm51bWJlcjtcbiAgICBwcml2YXRlIF9lbmRWYWx1ZTtcbiAgICBwcml2YXRlIF9lbmRUaW1lOm51bWJlcjtcbiAgICBwcml2YXRlIF9kdXJhdGlvbjpudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOm51bWJlciwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIHN0YXJ0VGltZTpudW1iZXIsZW5kVGltZTpudW1iZXIpXG4gICAge1xuICAgICAgICB0aGlzLl90eXBlPXR5cGU7XG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWU9c3RhcnRWYWx1ZTtcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lPXN0YXJ0VGltZTtcbiAgICAgICAgdGhpcy5fZW5kVmFsdWU9ZW5kVmFsdWU7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uPWVuZFRpbWUtc3RhcnRUaW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTdGF0ZSh0aW1lOm51bWJlciwgc3BlZWQ6bnVtYmVyKSB7XG4gICAgICAgIC8vIHRvZG86IGhhbmRsZSByZXZlcnNlIHBsYXliYWNrXG4gICAgICAgIGlmICh0aW1lIDwgdGhpcy5fc3RhcnRUaW1lICogc3BlZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZSA+IHRoaXMuX2VuZFRpbWUgKiBzcGVlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90eXBlID09IDApIHtcbiAgICAgICAgICAgIC8vaW50ZXJwb2xhdGUgbnVtYmVyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX3N0YXJ0VmFsdWUgKyAoKCh0aW1lIC0gdGhpcy5fc3RhcnRUaW1lKSAqICh0aGlzLl9kdXJhdGlvbiAqIHNwZWVkKSkgKiAodGhpcy5fZW5kVmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90eXBlID09IDEpe1xuICAgICAgICAgICAgLy90b2RvOiBpbnRlcnBvbGF0ZSBtYXRyaXgzRFxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90eXBlID09IDIpIHtcbiAgICAgICAgICAgIC8vdG9kbzogaW50ZXJwb2xhdGUgTWF0cml4M0QsIGJ1dCBoYW5kbGUgaXQgYXMgMkQgb2JqZWN0IChkbyBub3QgdG91Y2ggei5wb3NpdGlvbilcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdHlwZSA9PSAzKSB7XG4gICAgICAgICAgICAvL3RvZG86IGludGVycG9sYXRlIENvbG9yVHJhbnNmb3JtXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cblxuZXhwb3J0ID0gSW50ZXJwb2xhdGlvbk9iamVjdDtcbiJdfQ==